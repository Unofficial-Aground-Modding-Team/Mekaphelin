<?xml version="1.0" encoding="UTF-8"?>
<data>

  <tilesheet id="manufactory.png" width="217" height="80"/>
  <tile id="manufactory" sheet="manufactory.png" x="0"/>
  <animation id="manufactory.door.open" x="9" count="8"/>
  <animation id="manufactory.door.close" x="9" count="8" reverse="true"/>
  <animation id="manufactory.door.operate" x="17" count="8"/>
  <animation id="manufactory.off" x="0" count="1">
    <append tile="manufactory" animation="single"/>
  </animation>
  <animation id="manufactory.on" x="1" count="1">
    <append tile="manufactory" animation="single"/>
  </animation>
  <animation id="manufactory.open" x="1" count="8">
    <append tile="manufactory" animation="manufactory.door.open"/>
  </animation>
  <animation id="manufactory.close" x="1" count="8" reverse="true">
    <append tile="manufactory" animation="manufactory.door.close"/>
  </animation>
  <animation id="manufactory.operate" x="1" count="8">
    <append tile="manufactory" animation="manufactory.door.operate"/>
  </animation>

  <structure id="manufactory" tile="manufactory" type="crafting" name="factory" display="bunker_factory" title="common.bunker_factory" powered="true" fullHeight="true" repairType="uefd_engineer">
    <recipe type="manufactory"/>
    <over><play object="this" animation="open" /><action>this.loopAnimation("operate")</action></over>
    <out><play object="this" animation="close" /><action>this.loopAnimation("idle")</action></out>
    <operate><section if="!this.isPowered()"><dialogue section="warning" id="not_powered" /><stop /></section></operate>
    <light tile="light.large" color="9ce1eb" offsetX="53" offsetY="45" /><!-- Check -->
  </structure>
  <recipe id="small_mech" object="small_mech" description="item.descriptions.small_mech" type="manufactory" achievement="">
		<item id="titanium" count="5" />
		<item id="steel_bar" count="5" />
		<item id="silicon" count="5" />
	</recipe>
  <!-- <recipe id="pp_fuel_tritium" fuel="5000" type="fusion_plant"><item id="tritium" /></recipe>
  <recipe id="pp_fuel_helium" fuel="5000" type="fusion_plant"><item id="mek_helium" /></recipe>
  <recipe id="pp_fuel_uefd_fuel_rod" fuel="10000" type="fusion_plant"><item id="uefd_fuel_rod" /></recipe>
  <recipe id="craft_uefd_fuel_rod" creates="uefd_fuel_rod" type="fusion_plant">
    <item id="chrome_plating" count="1"/>
    <item id="mek_helium" count="1"/>
    <item id="tritium" count="1"/>
    <item id="uranium" count="1"/>
  </recipe> -->

  <tilesheet id="fusion_plant.png" width="114" height="83"/>
  <tile id="fusion_plant" sheet="fusion_plant.png" x="0"/>
  <animation id="fusion_plant.off" x="0" count="1"/>
  <animation id="fusion_plant.on" x="1" count="5"/>
  <structure id="fusion_plant" tile="fusion_plant" type="powerplant" name="power_plant" maxFuel="15000" repairType="uefd_engineer">
    <recipe type="fusion_plant" /><recipe type="nuclear_plant" /><recipe id="pp_battery" />
    <listItem icon="power" title="common.recharge_batteries" enabled="this.isPowered()" fail="warning.not_powered">
      <action>player.restorePowerFrom(this, 25)</action>
    </listItem>
    <light tile="nuclear_plant" offsetX="75" offsetY="64" /><!-- Check -->
  </structure>


  <tilesheet id="bunker_barracks_left4.png" width="56" height="55" />
  <tilesheet id="bunker_barracks_mid4.png" width="54" height="55" />
  <tilesheet id="bunker_barracks_right4.png" width="56" height="55" />
  <tile id="barracks_left" sheet="bunker_barracks_left4.png"/>
  <tile id="barracks_mid" sheet="bunker_barracks_mid4.png" />
  <tile id="barracks_right" sheet="bunker_barracks_right4.png"/>
  <animation id="bunker_barracks_base.off" x="0" count="1" />
	<animation id="bunker_barracks_base.on" x="1" count="4" />
  <structure id="barracks_kitchen" extends="bunker_kitchen" connectTo="bunker_right"/>
  <structure id="bunker_barracks_base" tile="bunker" animation="bunker_barracks_base" sleep="true" powered="true" name="enter" behind="true" fullHeight="true" repairType="uefd_engineer">
    <operate>
      <choose>
        <section if="this.isPowered()">
          <action>player.restoreHealth();</action>
        </section>
        <dialogue section="warning" id="not_powered_house" />
      </choose>
      <action if="var b = this.getBounds(); b.inflate(Tile.SIZE*3, 0); var s = area.getStructure(b, true, function(s){return s.info.id == 'o2_generator';}); return s != null && s.isPowered()">player.restoreOxygen();</action>
      <action>player.restoreStamina();</action><save sleep="true" />
    </operate>
    <light tile="light.large" color="9ce1eb" offsetX="30" offsetY="45" />
  </structure>
  <tile id="bunker_left" equals="bunker" offsetX="-1"/>
  <animation id="bunker_door_left.closed" x="1" count="4" offsetX="-1"/>
  <animation id="bunker_door_left.closing" x="5" count="4" offsetX="-1" reverse="true" />
  <animation id="bunker_door_left.opening" x="5" count="4" offsetX="-1"/>
  <structure id="bunker_barracks_left" extends="bunker_barracks_base" tile="barracks_left">
    <tile id="bunker_left" animation="bunker_door_left.closed" fps="15" y="0"/>
    <over><action>var door = this.getTileById("bunker_left"); if(door != null) door.playAnimation("bunker_door_left.opening", false)</action></over>
    <out><action>var door = this.getTileById("bunker_left"); if(door != null) door.playAnimation("bunker_door_left.closing", false, function(p){p.playAnimation("bunker_door_left.closed", true);})</action></out>
  </structure>
  <tile id="bunker_mid" equals="bunker" offsetX="-3"/>
  <animation id="bunker_door_mid.closed" x="1" count="4" offsetX="-3"/>
  <animation id="bunker_door_mid.closing" x="5" count="4" offsetX="-3" reverse="true" />
  <animation id="bunker_door_mid.opening" x="5" count="4" offsetX="-3"/>
  <structure id="bunker_barracks_mid" extends="bunker_barracks_base" tile="barracks_mid" connectTo="bunker_left">
    <tile id="bunker_mid" animation="bunker_door_mid.closed" fps="15" y="0"/>
    <over><action>var door = this.getTileById("bunker_mid"); if(door != null) door.playAnimation("bunker_door_mid.opening", false)</action></over>
    <out><action>var door = this.getTileById("bunker_mid"); if(door != null) door.playAnimation("bunker_door_mid.closing", false, function(p){p.playAnimation("bunker_door_mid.closed", true);})</action></out>
  </structure>
  <tile id="bunker_right" equals="bunker" offsetX="-4"/>
  <animation id="bunker_door_right.closed" x="1" count="4" offsetX="-3"/>
  <animation id="bunker_door_right.closing" x="5" count="4" offsetX="-3" reverse="true" />
  <animation id="bunker_door_right.opening" x="5" count="4" offsetX="-3"/>
  <structure id="bunker_barracks_right" extends="bunker_barracks_base" tile="barracks_right" connectTo="bunker_mid">
    <tile id="bunker_right" animation="bunker_door_right.closed" fps="15" y="0"/>
    <over><action>var door = this.getTileById("bunker_right"); if(door != null) door.playAnimation("bunker_door_right.opening", false)</action></over>
    <out><action>var door = this.getTileById("bunker_right"); if(door != null) door.playAnimation("bunker_door_right.closing", false, function(p){p.playAnimation("bunker_door_right.closed", true);})</action></out>
  </structure>

  <action>
    function uefd_outpost(area,?x,?y) {
        if (x == null){x = 0;}
        if (y == null){y = -1;}
        //var dx = x + 100;
        //for (o in x...dx){mine(o,-1); setOre(o,-1,'cable');}
        //area.dispatchEvent(new Event("update_cables"));
        var eStructure = getStructure('bunker_barracks_left');
        area.addStructure(eStructure.create((x * Tile.SIZE) + 0, (y * Tile.SIZE)));
        var eStructure = getStructure('bunker_barracks_mid');
        area.addStructure(eStructure.create((x * Tile.SIZE) + 56, (y * Tile.SIZE)));
        var eStructure = getStructure('bunker_barracks_right');
        area.addStructure(eStructure.create((x * Tile.SIZE) + 110, (y * Tile.SIZE)));
        var eStructure = getStructure('barracks_kitchen');
        area.addStructure(eStructure.create((x * Tile.SIZE) + 166, (y * Tile.SIZE)));
        }

  </action>

</data>
