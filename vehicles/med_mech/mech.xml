<?xml version="1.0" encoding="UTF-8"?>
<data>
  <include id="med_mech.xml"/>
  <tile id="mech_mech_emp" sheet="med_mech.2"/>
  <animation id="mech_mech_emp" count="8" />
  <object id="mech_mech_emp" tile="mech_mech_emp" animation="mech_mech_emp" layer="top" fps="12" removeOnComplete="true" save="false">
    <addedToArea><action>
      count = 0.0; function canDamage(o){
        return o != spawner && o.attackPower(1, 1, 0, null, false) > 0 &amp;&amp; o.getDefense(false, false, false) &lt; damage * 2;
      }
    </action><sound id="nuclear_missile" /></addedToArea>
    <onFrame>count += frames; if(count >= 8){count -= 8; for(o in this.getOverlappingObjects(canDamage)) o.damage(damage, FLAG_IGNORE_DEFENSE|FLAG_HIDE_ATTACKER, spawner);}</onFrame>
  </object>

  <tile id="med_mech" sheet="med_mech.1"/>
  <animation id="med_mech.move" x="1" count="14"/>
  <animation id="med_mech.cannons" x="15" count="8"/>

  <vehicle id="med_mech" tile="med_mech" health="500" speed="2" defense="10" fuel="2000" efficiency="0" fps="10" icon="exo_mech.ico" title="item.names.med_mech" blood="science.explosion.med" max_weight="3000" hitDamage="1" death_sfx="explosion" item="med_mech" block_icon="laser_gun.ico">
    <listItem title="vehicle.pack_up">
      <closeWindows /><action>this.dismount();</action>
      <invokeLater><section if="player.vehicle == null">
        <action>player.inventory.addAll(this.inventory);</action><remove object="this" />
        <item id="med_mech" value="this.health"><parameter id="l" value="this.equipment.getItemId('attack')" /><parameter id="p" value="this.equipment.getItemId('tech')" /><parameter id="f" value="Std.string(this.fuel)" /></item>
      </section></invokeLater>
    </listItem>
    <repair id="chrome_plating" value="500" />
    <fuel id="phlebotnium" fuel="1000" />
    <slot id="attack"/>
    <light tile="light.medium" color="6cd3f0" flicker="true" />
    <attack type="projectile" useDefend="true" attack="10" range="10" animation="cannons" cost="10" scaleCost="false" sfx="laser_bolt">
      <projectile tile="laser_bolt" animation="laser_bolt" speed="5" offsetY="6" delay="1" />
      <projectile tile="laser_bolt" animation="laser_bolt" speed="5" offsetY="6" delay="1" />
    </attack>

    <ability hotkey="8" icon="bombardment.ico" animation="item6" available="player.vehicle.fuel > 0">
      <object id="mech_mech_emp" x="(player.vehicle.getCenterX() - 128)/Tile.SIZE" y="(player.vehicle.getCenterY() + 112)/Tile.SIZE">this.vars.set("spawner", player.vehicle); this.vars.set('damage', Math.ceil(player.vehicle.fuel / 200));</object>
      <action>player.vehicle.setFuel(0);</action>
    </ability>
  </vehicle>

  <item id="med_mech" type="object" cost="0" weight="100" icon="exo_mech.ico" durability="500" durabilityName="common.health" durabilityIcon="vehicle_health">
    <action id="plant" name="vehicle.deploy" object="med_mech" onGrass="false" overlapBlueprints="true" overlapStructures="true" removeBushes="false" on_air="true" underground="true">
			<action>
				object.setHealth(this.getFeed()); p = Item.getParameter(this.getNameStr(), "l"); d = Item.getParameter(this.getNameStr(), "p");
				f = Item.getParameter(this.getNameStr(), "f"); if(f != null) object.setFuel(Std.parseInt(f));
			</action>
			<equip eval="p" to="object" fromInventory="false" if="p != null" /><equip eval="d" to="object" fromInventory="false" if="d != null" />
		</action>
    <action id="feed" alt="feed_all" alt_name="repair_all" name="repair" full="warning.max_repair" auto="common.auto_repair" select="actions.repair" sfx="workshop" />
    <food id="chrome_plating" value="500" />
  </item>

  <tile id="med_mech.rockets" sheet="med_mech.png" x="23"/>
  <animation id="equipment.med_mech.rockets.move" x="1" count="14"/>
  <animation id="equipment.med_mech.rockets" x="15" count="4"/>
  <item id="med_mech.rockets" type="equipment" slot="attack" equipOn="med_mech" cost="10000" weight="40" range="30" power="10" icon="fighter.launcher.ico" projectile="missile" group="rocket_launcher" offsetY="-12" offsetX="15">
    <action id="setProjectile" />
  </item>
</data>
